{"ast":null,"code":"var _jsxFileName = \"/home/edilene/\\xC1rea de Trabalho/bootcamp/React_JS/desafio de projeto react JS/github-api/src/components/providers/github-provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useCallback, useState } from 'react';\nimport api from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GithubContext = /*#__PURE__*/createContext({\n  loading: false,\n  user: {},\n  repositories: [],\n  starred: []\n});\n\nconst GithubProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [githubState, setGithubState] = useState({\n    loading: false,\n    user: {\n      login: undefined,\n      name: undefined,\n      html_url: undefined,\n      blog: undefined,\n      company: undefined,\n      location: undefined,\n      followers: 0,\n      following: 0,\n      public_gists: 0,\n      public_repo: 0\n    },\n    repositories: [],\n    starred: []\n  });\n\n  const getUser = username => {\n    api.get(`users/{username}`).then(_ref2 => {\n      let {\n        data: {\n          user\n        }\n      } = _ref2;\n      setGithubState(prevState => ({ ...prevState,\n        user: {\n          login: user.login,\n          name: user.name,\n          html_url: user.html_url,\n          blog: user.blog,\n          company: user.company,\n          location: user.location,\n          followers: user.followers,\n          following: user.following,\n          public_gists: user.public_gists,\n          public_repo: user.public_repo\n        }\n      }));\n    });\n  };\n\n  const contextValue = {\n    githubState,\n    getUser: useCallback(username => getUser(username), [])\n  };\n  return /*#__PURE__*/_jsxDEV(GithubContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GithubProvider, \"/sT4vrSZ6GZppxWyJfw/fCrKof0=\");\n\n_c = GithubProvider;\nexport default GithubProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"GithubProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useState","api","GithubContext","loading","user","repositories","starred","GithubProvider","children","githubState","setGithubState","login","undefined","name","html_url","blog","company","location","followers","following","public_gists","public_repo","getUser","username","get","then","data","prevState","contextValue"],"sources":["/home/edilene/Área de Trabalho/bootcamp/React_JS/desafio de projeto react JS/github-api/src/components/providers/github-provider.js"],"sourcesContent":["import React, {createContext, useCallback, useState} from 'react';\nimport api from '../services/api.js'\n\nexport const GithubContext = createContext({\n    loading: false,\n    user: {},\n    repositories: [],\n    starred: []\n});\n\nconst GithubProvider = ({children}) => {\n    const [githubState, setGithubState] = useState({\n        loading: false,\n        user: {\n            login: undefined,\n            name: undefined,\n            html_url: undefined,\n            blog: undefined,\n            company: undefined,\n            location: undefined,\n            followers: 0,\n            following: 0,\n            public_gists: 0,\n            public_repo: 0\n        },\n        repositories: [],\n        starred:[]\n    });\n\n    const getUser = (username) => {\n        api.get(`users/{username}`).then(({ data: {user}}) => {\n            setGithubState(prevState => ({\n                ...prevState, \n                user: {\n                    login: user.login,\n                    name: user.name,\n                    html_url: user.html_url,\n                    blog: user.blog,\n                    company: user.company,\n                    location: user.location,\n                    followers: user.followers,\n                    following: user.following,\n                    public_gists: user.public_gists,\n                    public_repo: user.public_repo\n                }\n            }));\n        });\n    }\n\n    const contextValue = {\n        githubState,\n        getUser: useCallback((username) => getUser(username), [])\n    }\n\n  return (\n    <GithubContext.Provider value={contextValue}>\n        {children}\n    </GithubContext.Provider>\n  )\n}\n\nexport default GithubProvider;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,QAA3C,QAA0D,OAA1D;AACA,OAAOC,GAAP,MAAgB,oBAAhB;;AAEA,OAAO,MAAMC,aAAa,gBAAGJ,aAAa,CAAC;EACvCK,OAAO,EAAE,KAD8B;EAEvCC,IAAI,EAAE,EAFiC;EAGvCC,YAAY,EAAE,EAHyB;EAIvCC,OAAO,EAAE;AAJ8B,CAAD,CAAnC;;AAOP,MAAMC,cAAc,GAAG,QAAgB;EAAA;;EAAA,IAAf;IAACC;EAAD,CAAe;EACnC,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC;IAC3CG,OAAO,EAAE,KADkC;IAE3CC,IAAI,EAAE;MACFO,KAAK,EAAEC,SADL;MAEFC,IAAI,EAAED,SAFJ;MAGFE,QAAQ,EAAEF,SAHR;MAIFG,IAAI,EAAEH,SAJJ;MAKFI,OAAO,EAAEJ,SALP;MAMFK,QAAQ,EAAEL,SANR;MAOFM,SAAS,EAAE,CAPT;MAQFC,SAAS,EAAE,CART;MASFC,YAAY,EAAE,CATZ;MAUFC,WAAW,EAAE;IAVX,CAFqC;IAc3ChB,YAAY,EAAE,EAd6B;IAe3CC,OAAO,EAAC;EAfmC,CAAD,CAA9C;;EAkBA,MAAMgB,OAAO,GAAIC,QAAD,IAAc;IAC1BtB,GAAG,CAACuB,GAAJ,CAAS,kBAAT,EAA4BC,IAA5B,CAAiC,SAAqB;MAAA,IAApB;QAAEC,IAAI,EAAE;UAACtB;QAAD;MAAR,CAAoB;MAClDM,cAAc,CAACiB,SAAS,KAAK,EACzB,GAAGA,SADsB;QAEzBvB,IAAI,EAAE;UACFO,KAAK,EAAEP,IAAI,CAACO,KADV;UAEFE,IAAI,EAAET,IAAI,CAACS,IAFT;UAGFC,QAAQ,EAAEV,IAAI,CAACU,QAHb;UAIFC,IAAI,EAAEX,IAAI,CAACW,IAJT;UAKFC,OAAO,EAAEZ,IAAI,CAACY,OALZ;UAMFC,QAAQ,EAAEb,IAAI,CAACa,QANb;UAOFC,SAAS,EAAEd,IAAI,CAACc,SAPd;UAQFC,SAAS,EAAEf,IAAI,CAACe,SARd;UASFC,YAAY,EAAEhB,IAAI,CAACgB,YATjB;UAUFC,WAAW,EAAEjB,IAAI,CAACiB;QAVhB;MAFmB,CAAL,CAAV,CAAd;IAeH,CAhBD;EAiBH,CAlBD;;EAoBA,MAAMO,YAAY,GAAG;IACjBnB,WADiB;IAEjBa,OAAO,EAAEvB,WAAW,CAAEwB,QAAD,IAAcD,OAAO,CAACC,QAAD,CAAtB,EAAkC,EAAlC;EAFH,CAArB;EAKF,oBACE,QAAC,aAAD,CAAe,QAAf;IAAwB,KAAK,EAAEK,YAA/B;IAAA,UACKpB;EADL;IAAA;IAAA;IAAA;EAAA,QADF;AAKD,CAjDD;;GAAMD,c;;KAAAA,c;AAmDN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}